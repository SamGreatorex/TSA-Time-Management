	
# Service name
service: time-management-backend

app: time-management-backend
custom:
  serverless-offline:
    httpPort: 4000
    useChildProcesses: true
  prune:
    automatic: true
    number: 1
  cors-config:
    origins:
      - '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: false
provider:
  name: aws
  stage: dev
  region: eu-west-2
  profile: aws-dev-user #This is the name of the AWS profile saved locally
  stackName: ${opt:stage, self:provider.stage}-${self:service}-deployment
  runtime: nodejs14.x
  memorySize: 8192
  lambdaHashingVersion: '20201221'
  versionFunctions: false
  tracing:
    lambda: true
  logRetentionInDays: 7
  timeout: 30
  environment:
    NODE_ENV: ${file(./.env.yml):${opt:stage, self:provider.stage}.NODE_ENV}
    STAGE: ${opt:stage, self:provider.stage}
    TASK_TABLE: ${opt:stage, self:provider.stage}-tsa-tasks
    TIME_CARD_TABLE: ${opt:stage, self:provider.stage}-time-card
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - '*'      
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - '*'        
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'arn:aws:dynamodb:eu-west-2:560506968350:table/${opt:stage, self:provider.stage}-time-card'      
        - 'arn:aws:dynamodb:eu-west-2:560506968350:table/${opt:stage, self:provider.stage}-tsa-tasks'
        - 'arn:aws:dynamodb:eu-west-2:560506968350:table/${opt:stage, self:provider.stage}-tsa-users'
  prune:
    automatic: true
    number: 1
  cors-config:
    origins:
      - '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: false
functions:
# Time Tasks
  createTask:
    handler: handlers/tasks.createTask
    events:
      - http:
          path: tasks
          method: post
          cors: ${self:custom.cors-config}
  deleteTask:
    handler: handlers/tasks.deleteTask
    events:
      - http:
          path: tasks/{TaskId}
          method: delete
          cors: ${self:custom.cors-config}
  listTasks:
    handler: handlers/tasks.listTasks
    events:
      - http:
          path: tasks
          method: get
          cors: ${self:custom.cors-config}
# TimeCards
  createTimecard:
    handler: handlers/timecards.createTimecard
    events:
      - http:
          path: timecard
          method: post
          cors: ${self:custom.cors-config}
  listUserTimecards:
    handler: handlers/timecards.listUserTimecards
    events:
      - http:
          path: /{UserId}/timecard
          method: get
          cors: ${self:custom.cors-config}
# Testing
  testLambda:
    handler: handlers/testing.testLambda
    events:
      - http:
          path: testing
          method: post
          cors: ${self:custom.cors-config}
resources:
  Resources:
    # Time Tasks
    TimeEntryTasksDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: TaskId
            AttributeType: S
        KeySchema:
          - AttributeName: TaskId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${opt:stage, self:provider.stage}-tsa-tasks
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES          
# TimeCard
    TimeCardDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: TimeCardId
            AttributeType: S
        KeySchema:
          - AttributeName: TimeCardId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${opt:stage, self:provider.stage}-time-card
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  # Users
    TSAUsersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: UserId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${opt:stage, self:provider.stage}-tsa-users
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
package:
  exclude:
    - .nyc_output/**
    - coverage/**
    - test/**
    - .git/**
    - serverless.yml
    - .serverless/**
    - requests/**
    - node_modules/puppeteer/.local-chromium/**
plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-common-excludes
